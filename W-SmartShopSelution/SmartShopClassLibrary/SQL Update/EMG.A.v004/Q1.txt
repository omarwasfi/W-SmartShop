adding saleprice , incomePrice and date to Stock table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Product
GO
ALTER TABLE dbo.Product SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Store
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT DF_Stock_Quantity
GO
CREATE TABLE dbo.Tmp_Stock
	(
	Id int NOT NULL IDENTITY (12000, 1),
	StoreId int NOT NULL,
	ProductId int NOT NULL,
	IncomePrice money NULL,
	SalePrice money NULL,
	Date datetime NULL,
	Quantity int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Stock SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Stock ADD CONSTRAINT
	DF_Stock_Quantity DEFAULT ((0)) FOR Quantity
GO
SET IDENTITY_INSERT dbo.Tmp_Stock ON
GO
IF EXISTS(SELECT * FROM dbo.Stock)
	 EXEC('INSERT INTO dbo.Tmp_Stock (Id, StoreId, ProductId, Quantity)
		SELECT Id, StoreId, ProductId, Quantity FROM dbo.Stock WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Stock OFF
GO
DROP TABLE dbo.Stock
GO
EXECUTE sp_rename N'dbo.Tmp_Stock', N'Stock', 'OBJECT' 
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	PK_Stock PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Stock', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'CONTROL') as Contr_Per 


------------------------------------------------------------------------------------------------------------------------------------------

adding the ExpirationPeriod to the product table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Product
	DROP CONSTRAINT FK_Product_Category
GO
ALTER TABLE dbo.Category SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Category', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Category', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Category', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Product
	DROP CONSTRAINT FK_Product_Brand
GO
ALTER TABLE dbo.Brand SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Brand', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Brand', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Brand', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Product
	DROP CONSTRAINT DF_Product_CategoryId
GO
ALTER TABLE dbo.Product
	DROP CONSTRAINT DF_Product_BrandId
GO
CREATE TABLE dbo.Tmp_Product
	(
	Id int NOT NULL IDENTITY (100000, 1),
	Name nvarchar(200) NOT NULL,
	Size nvarchar(200) NULL,
	BarCode nvarchar(200) NOT NULL,
	SerialNumber nvarchar(200) NULL,
	SerialNumber2 nvarchar(200) NULL,
	Details nvarchar(500) NULL,
	CategoryId int NOT NULL,
	BrandId int NOT NULL,
	SalePrice money NOT NULL,
	IncomePrice money NOT NULL,
	ExpirationPeriod int NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Product SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Product ADD CONSTRAINT
	DF_Product_CategoryId DEFAULT ((11000)) FOR CategoryId
GO
ALTER TABLE dbo.Tmp_Product ADD CONSTRAINT
	DF_Product_BrandId DEFAULT ((10000)) FOR BrandId
GO
SET IDENTITY_INSERT dbo.Tmp_Product ON
GO
IF EXISTS(SELECT * FROM dbo.Product)
	 EXEC('INSERT INTO dbo.Tmp_Product (Id, Name, Size, BarCode, SerialNumber, SerialNumber2, Details, CategoryId, BrandId, SalePrice, IncomePrice)
		SELECT Id, Name, Size, BarCode, SerialNumber, SerialNumber2, Details, CategoryId, BrandId, SalePrice, IncomePrice FROM dbo.Product WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Product OFF
GO
ALTER TABLE dbo.OrderProduct
	DROP CONSTRAINT FK_OrderProduct_Product
GO
ALTER TABLE dbo.IncomeOrderProduct
	DROP CONSTRAINT FK_IncomeOrderProduct_Product
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Product
GO
DROP TABLE dbo.Product
GO
EXECUTE sp_rename N'dbo.Tmp_Product', N'Product', 'OBJECT' 
GO
ALTER TABLE dbo.Product ADD CONSTRAINT
	PK_Products PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Product ADD CONSTRAINT
	FK_Product_Brand FOREIGN KEY
	(
	BrandId
	) REFERENCES dbo.Brand
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Product ADD CONSTRAINT
	FK_Product_Category FOREIGN KEY
	(
	CategoryId
	) REFERENCES dbo.Category
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Stock SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Stock', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.IncomeOrderProduct ADD CONSTRAINT
	FK_IncomeOrderProduct_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.IncomeOrderProduct SET (LOCK_ESCALATION = TABLE)
GO
COMMIT



------------------------------------------------------------------------------------------------------------------------------------------

addint ExpirationPeriod to stock table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Product
GO
ALTER TABLE dbo.Product SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Store
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT DF_Stock_Quantity
GO
CREATE TABLE dbo.Tmp_Stock
	(
	Id int NOT NULL IDENTITY (12000, 1),
	StoreId int NOT NULL,
	ProductId int NOT NULL,
	IncomePrice money NULL,
	SalePrice money NULL,
	Date datetime NULL,
	ExpirationPeriod int NULL,
	Quantity int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Stock SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Stock ADD CONSTRAINT
	DF_Stock_Quantity DEFAULT ((0)) FOR Quantity
GO
SET IDENTITY_INSERT dbo.Tmp_Stock ON
GO
IF EXISTS(SELECT * FROM dbo.Stock)
	 EXEC('INSERT INTO dbo.Tmp_Stock (Id, StoreId, ProductId, IncomePrice, SalePrice, Date, Quantity)
		SELECT Id, StoreId, ProductId, IncomePrice, SalePrice, Date, Quantity FROM dbo.Stock WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Stock OFF
GO
DROP TABLE dbo.Stock
GO
EXECUTE sp_rename N'dbo.Tmp_Stock', N'Stock', 'OBJECT' 
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	PK_Stock PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Stock', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'CONTROL') as Contr_Per 



------------------------------------------------------------------------------------------------------------------------------------------
Edit the permissions

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Permission
	DROP CONSTRAINT DF_Permissions_CanSellUC
GO
ALTER TABLE dbo.Permission
	DROP CONSTRAINT DF_Permissions_CanInventoryUC
GO
ALTER TABLE dbo.Permission
	DROP CONSTRAINT DF_Permissions_CanProductManager
GO
ALTER TABLE dbo.Permission
	DROP CONSTRAINT DF_Permission_CanStaffsManagerUC
GO
CREATE TABLE dbo.Tmp_Permission
	(
	Id int NOT NULL IDENTITY (300000, 1),
	CanSellUC bit NOT NULL,
	CanSellingOrdersManagerUC bit NULL,
	CanInventoryUC bit NOT NULL,
	CanGlobalInventoryUC bit NULL,
	CanProductManagerUC bit NOT NULL,
	CanStaffsManagerUC bit NOT NULL,
	CanIncomeOrderUC bit NULL,
	CanIncomeOrderManagerUC bit NULL,
	CanInstallmentOrderUC bit NULL,
	CanCashFlowUC bit NULL,
	CanBillManagerUC bit NULL,
	CanPriceListUC bit NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Permission SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Permission ADD CONSTRAINT
	DF_Permissions_CanSellUC DEFAULT ((0)) FOR CanSellUC
GO
ALTER TABLE dbo.Tmp_Permission ADD CONSTRAINT
	DF_Permissions_CanInventoryUC DEFAULT ((0)) FOR CanInventoryUC
GO
ALTER TABLE dbo.Tmp_Permission ADD CONSTRAINT
	DF_Permissions_CanProductManager DEFAULT ((0)) FOR CanProductManagerUC
GO
ALTER TABLE dbo.Tmp_Permission ADD CONSTRAINT
	DF_Permission_CanStaffsManagerUC DEFAULT ((0)) FOR CanStaffsManagerUC
GO
SET IDENTITY_INSERT dbo.Tmp_Permission ON
GO
IF EXISTS(SELECT * FROM dbo.Permission)
	 EXEC('INSERT INTO dbo.Tmp_Permission (Id, CanSellUC, CanInventoryUC, CanProductManagerUC, CanStaffsManagerUC)
		SELECT Id, CanSellUC, CanInventoryUC, CanProductManagerUC, CanStaffsManagerUC FROM dbo.Permission WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Permission OFF
GO
DROP TABLE dbo.Permission
GO
EXECUTE sp_rename N'dbo.Tmp_Permission', N'Permission', 'OBJECT' 
GO
ALTER TABLE dbo.Permission ADD CONSTRAINT
	PK_Permissions PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT
select Has_Perms_By_Name(N'dbo.Permission', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Permission', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Permission', 'Object', 'CONTROL') as Contr_Per 


-------------------------------------------------------------------------------------------------------------------------------------

spPermission_GetAll


-- ================================================
-- Template generated from Template Explorer using:
-- Create Procedure (New Menu).SQL
--
-- Use the Specify Values for Template Parameters 
-- command (Ctrl-Shift-M) to fill in the parameter 
-- values below.
--
-- This block of comments will not be included in
-- the definition of the procedure.
-- ================================================
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE spPermission_GetAll


AS
BEGIN

	SET NOCOUNT ON;

	SELECT * FROM Permission;
	
END
GO


-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spStaff_GetPersonIdByStaffId 
	
	@StaffId int

AS
BEGIN
	

	SET NOCOUNT ON;

	SELECT Staff.PersonId
	FROM Staff 
	WHERE Staff.Id = @StaffId;
	

END
GO


-------------------------------------------------------------------------------------------------------------------------------------



CREATE PROCEDURE spStaff_GetPermissionIdByStaffId 
	@StaffId int
AS
BEGIN



	SET NOCOUNT ON;

	SELECT Staff.PermissionId
	FROM Staff
	WHERE Staff.Id = @StaffId;

END
GO


-------------------------------------------------------------------------------------------------------------------------------------




CREATE PROCEDURE spCustomer_GetPersonIdByCustomerId
	
	@CustomerId int
AS
BEGIN


	SET NOCOUNT ON;

	SELECT Customer.PersonId
	FROM Customer
	WHERE Customer.Id = @CustomerId;

END
GO


-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spSupplier_GetPersonIdBySupplierId 
	
	@SupplierId int
		
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT Supplier.PersonId
	FROM Supplier
	WHERE Supplier.Id = @SupplierId;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------


adding the quantity alarm To products table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Product ADD
	AlarmQuantity int NULL
GO
ALTER TABLE dbo.Product SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Product
GO
ALTER TABLE dbo.Product SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Store
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT DF_Stock_Quantity
GO
CREATE TABLE dbo.Tmp_Stock
	(
	Id int NOT NULL IDENTITY (12000, 1),
	StoreId int NOT NULL,
	ProductId int NOT NULL,
	IncomePrice money NULL,
	SalePrice money NULL,
	Date datetime NULL,
	ExpirationPeriod int NULL,
	ExpirationAlarmEnabled bit NULL,
	Quantity int NOT NULL,
	AlarmQuantity int NULL,
	QuantityAlarmEnabled bit NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Stock SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Stock ADD CONSTRAINT
	DF_Stock_Quantity DEFAULT ((0)) FOR Quantity
GO
SET IDENTITY_INSERT dbo.Tmp_Stock ON
GO
IF EXISTS(SELECT * FROM dbo.Stock)
	 EXEC('INSERT INTO dbo.Tmp_Stock (Id, StoreId, ProductId, IncomePrice, SalePrice, Date, ExpirationPeriod, Quantity)
		SELECT Id, StoreId, ProductId, IncomePrice, SalePrice, Date, ExpirationPeriod, Quantity FROM dbo.Stock WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Stock OFF
GO
DROP TABLE dbo.Stock
GO
EXECUTE sp_rename N'dbo.Tmp_Stock', N'Stock', 'OBJECT' 
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	PK_Stock PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Stock', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'CONTROL') as Contr_Per 


-------------------------------------------------------------------------------------------------------------------------------------

USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spProduct_GetAll]    Script Date: 11/7/2019 1:39:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spProduct_GetAll]

AS
BEGIN

	SET NOCOUNT ON;
	
	SELECT Id,Name,Size,BarCode,SerialNumber,SerialNumber2,Details,SalePrice,IncomePrice,ExpirationPeriod,AlarmQuantity
	FROM Product;
END


-------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spProduct_GetCategoryIdByProductId

	@ProductId int

AS
BEGIN



	SET NOCOUNT ON;

	SELECT CategoryId
	FROM Product
	WHERE Product.Id = @ProductId;

END
GO


-------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spProduct_GetBrandIdByProductId

	@ProductId int
	
AS
BEGIN

	
	SET NOCOUNT ON;
	
	SELECT BrandId
	FROM Product
	WHERE Product.Id = @ProductId;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------



ALTER PROCEDURE [dbo].[spStock_GetAll]

AS
BEGIN

	SET NOCOUNT ON;

	SELECT Id,
		   IncomePrice,
		   SalePrice,
		   Date,
		   ExpirationPeriod,
		   ExpirationAlarmEnabled,
		   Quantity,
		   AlarmQuantity,
		   QuantityAlarmEnabled 
	FROM Stock;

END

-------------------------------------------------------------------------------------------------------------------------------------

Make the OrderProduct Quantity Float

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.OrderProduct
	DROP CONSTRAINT FK_OrderProduct_Product
GO
ALTER TABLE dbo.Product SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.OrderProduct
	DROP CONSTRAINT FK_OrderProduct_Order
GO
ALTER TABLE dbo.Orders SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Orders', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Orders', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Orders', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.OrderProduct
	DROP CONSTRAINT DF_OrderProduct_OrderId
GO
ALTER TABLE dbo.OrderProduct
	DROP CONSTRAINT DF_OrderProduct_ProductId
GO
CREATE TABLE dbo.Tmp_OrderProduct
	(
	Id int NOT NULL IDENTITY (50000, 1),
	OrderId int NOT NULL,
	ProductId int NOT NULL,
	Quantity float(53) NOT NULL,
	SalePrice money NOT NULL,
	Discount money NOT NULL,
	Profit money NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_OrderProduct SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_OrderProduct ADD CONSTRAINT
	DF_OrderProduct_OrderId DEFAULT ((200000)) FOR OrderId
GO
ALTER TABLE dbo.Tmp_OrderProduct ADD CONSTRAINT
	DF_OrderProduct_ProductId DEFAULT ((100000)) FOR ProductId
GO
SET IDENTITY_INSERT dbo.Tmp_OrderProduct ON
GO
IF EXISTS(SELECT * FROM dbo.OrderProduct)
	 EXEC('INSERT INTO dbo.Tmp_OrderProduct (Id, OrderId, ProductId, Quantity, SalePrice, Discount, Profit)
		SELECT Id, OrderId, ProductId, CONVERT(float(53), Quantity), SalePrice, Discount, Profit FROM dbo.OrderProduct WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_OrderProduct OFF
GO
DROP TABLE dbo.OrderProduct
GO
EXECUTE sp_rename N'dbo.Tmp_OrderProduct', N'OrderProduct', 'OBJECT' 
GO
ALTER TABLE dbo.OrderProduct ADD CONSTRAINT
	PK_OrderItems PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.OrderProduct ADD CONSTRAINT
	FK_OrderProduct_Order FOREIGN KEY
	(
	OrderId
	) REFERENCES dbo.Orders
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.OrderProduct ADD CONSTRAINT
	FK_OrderProduct_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.OrderProduct', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.OrderProduct', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.OrderProduct', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spOrderProduct_GetAll


AS
BEGIN

	SET NOCOUNT ON;

	SELECT Quantity,SalePrice,Discount,Profit
	FROM OrderProduct

END
GO



-------------------------------------------------------------------------------------------------------------------------------------

the stock quantity is float

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Product
GO
ALTER TABLE dbo.Product SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Store
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT DF_Stock_Quantity
GO
CREATE TABLE dbo.Tmp_Stock
	(
	Id int NOT NULL IDENTITY (12000, 1),
	StoreId int NOT NULL,
	ProductId int NOT NULL,
	IncomePrice money NULL,
	SalePrice money NULL,
	Date datetime NULL,
	ExpirationPeriod int NULL,
	ExpirationAlarmEnabled bit NULL,
	Quantity float(53) NOT NULL,
	AlarmQuantity int NULL,
	QuantityAlarmEnabled bit NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Stock SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Stock ADD CONSTRAINT
	DF_Stock_Quantity DEFAULT ((0)) FOR Quantity
GO
SET IDENTITY_INSERT dbo.Tmp_Stock ON
GO
IF EXISTS(SELECT * FROM dbo.Stock)
	 EXEC('INSERT INTO dbo.Tmp_Stock (Id, StoreId, ProductId, IncomePrice, SalePrice, Date, ExpirationPeriod, ExpirationAlarmEnabled, Quantity, AlarmQuantity, QuantityAlarmEnabled)
		SELECT Id, StoreId, ProductId, IncomePrice, SalePrice, Date, ExpirationPeriod, ExpirationAlarmEnabled, CONVERT(float(53), Quantity), AlarmQuantity, QuantityAlarmEnabled FROM dbo.Stock WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Stock OFF
GO
DROP TABLE dbo.Stock
GO
EXECUTE sp_rename N'dbo.Tmp_Stock', N'Stock', 'OBJECT' 
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	PK_Stock PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Stock', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spOrderProduct_GetProdcutIdByOrderProductId 
	
	@OrderProductId int
AS
BEGIN


	SET NOCOUNT ON;

	SELECT ProductId
	FROM OrderProduct
	WHERE Id = @OrderProductId;

END
GO



-------------------------------------------------------------------------------------------------------------------------------------


ALTER PROCEDURE [dbo].[spOrderProduct_GetAll]


AS
BEGIN

	SET NOCOUNT ON;

	SELECT Id,Quantity,SalePrice,Discount,Profit
	FROM OrderProduct

END


-------------------------------------------------------------------------------------------------------------------------------------

convert Quantity in the IncomeOrderProduct to float

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.IncomeOrderProduct
	DROP CONSTRAINT FK_IncomeOrderProduct_Product
GO
ALTER TABLE dbo.Product SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.IncomeOrderProduct
	DROP CONSTRAINT FK_IncomeOrderProduct_IncomeOrder
GO
ALTER TABLE dbo.IncomeOrder SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.IncomeOrder', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.IncomeOrder', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.IncomeOrder', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_IncomeOrderProduct
	(
	Id int NOT NULL IDENTITY (70000, 1),
	IncomeOrderId int NOT NULL,
	ProductId int NOT NULL,
	IncomePrice money NOT NULL,
	Quantity float(53) NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_IncomeOrderProduct SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_IncomeOrderProduct ON
GO
IF EXISTS(SELECT * FROM dbo.IncomeOrderProduct)
	 EXEC('INSERT INTO dbo.Tmp_IncomeOrderProduct (Id, IncomeOrderId, ProductId, IncomePrice, Quantity)
		SELECT Id, IncomeOrderId, ProductId, IncomePrice, CONVERT(float(53), Quantity) FROM dbo.IncomeOrderProduct WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_IncomeOrderProduct OFF
GO
DROP TABLE dbo.IncomeOrderProduct
GO
EXECUTE sp_rename N'dbo.Tmp_IncomeOrderProduct', N'IncomeOrderProduct', 'OBJECT' 
GO
ALTER TABLE dbo.IncomeOrderProduct ADD CONSTRAINT
	PK_IncomeOrderProduct PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.IncomeOrderProduct ADD CONSTRAINT
	FK_IncomeOrderProduct_IncomeOrder FOREIGN KEY
	(
	IncomeOrderId
	) REFERENCES dbo.IncomeOrder
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.IncomeOrderProduct ADD CONSTRAINT
	FK_IncomeOrderProduct_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.IncomeOrderProduct', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.IncomeOrderProduct', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.IncomeOrderProduct', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spIncomeOrderProduct_GetProductIdByIncomeOrderProductId

	@IncomeOrderProductId int

AS
BEGIN


	SET NOCOUNT ON;

	SELECT ProductId
	FROM IncomeOrderProduct
	WHERE Id = @IncomeOrderProductId;

END
GO


-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spIncomeOrderProduct_GetAll

AS
BEGIN


	SET NOCOUNT ON;

	SELECT Id , IncomePrice , Quantity
	FROM IncomeOrderProduct;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------

remove the TotalPrice from Orders table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Orders
	DROP COLUMN TotalPrice
GO
ALTER TABLE dbo.Orders SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Orders', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Orders', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Orders', 'Object', 'CONTROL') as Contr_Per 
-------------------------------------------------------------------------------------------------------------------------------------


ALTER PROCEDURE [dbo].[spOrders_GetAll]

	
	
AS
BEGIN

	SET NOCOUNT ON;
	
	SELECT Id,DateTimeOfTheOrder,Paid,LastPaymentDate,Details
	FROM Orders;

END


-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spOrders_GetCustomerIdByOrderId
	 @OrderId int
AS
BEGIN
	


	SET NOCOUNT ON;

	SELECT CustomerId
	FROM Orders
	WHERE Id = @OrderId;
    
END
GO



------------------------------------------------------------------------------------------------------------------------------------

USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spOrders_GetStoreIdByOrderId]    Script Date: 11/10/2019 4:36:43 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spOrders_GetStoreIdByOrderId]
	@OrderId int
AS
BEGIN

	

	SET NOCOUNT ON;

	/*
	SELECT Store.Id
	FROM Store
	INNER JOIN Orders
	ON Orders.StoreId = Store.Id
	WHERE Orders.Id = @OrderId;
	*/


	SELECT StoreId
	FROM Orders
	WHERE Orders.Id = @OrderId;
    
END


-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spOrders_GetStaffIdByOrderId
	@OrderId int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT StaffId
	FROM Orders
	WHERE  Id =  @OrderId;

END
GO


-------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE spOrders_GetOrderProductIdByOrderId
	@OrderId int
AS
BEGIN
	


	SET NOCOUNT ON;

	SELECT Id
	FROM OrderProduct
	WHERE OrderId = @OrderId ;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------
adding the owner table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Owner
	(
	Id int NOT NULL IDENTITY (1100, 1),
	PersonId int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Owner ADD CONSTRAINT
	PK_Owner PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Owner SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Owner', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'CONTROL') as Contr_Per 


-------------------------------------------------------------------------------------------------------------------------------------
adjust the Owner Table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Person SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Person', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Person', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Person', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Owner ADD CONSTRAINT
	FK_Owner_Person FOREIGN KEY
	(
	PersonId
	) REFERENCES dbo.Person
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Owner SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Owner', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'CONTROL') as Contr_Per 


-------------------------------------------------------------------------------------------------------------------------------------
Create the investment table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Investment
	(
	Id int NOT NULL,
	OwnerId int NOT NULL,
	Date datetime NOT NULL,
	TotalMoney money NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Investment ADD CONSTRAINT
	PK_Investment PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Investment SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Investment', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Investment', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Investment', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------
adjust the investment table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Owner SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Owner', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Investment
	(
	Id int NOT NULL IDENTITY (1200, 1),
	OwnerId int NOT NULL,
	Date datetime NOT NULL,
	TotalMoney money NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Investment SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Investment ON
GO
IF EXISTS(SELECT * FROM dbo.Investment)
	 EXEC('INSERT INTO dbo.Tmp_Investment (Id, OwnerId, Date, TotalMoney)
		SELECT Id, OwnerId, Date, TotalMoney FROM dbo.Investment WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Investment OFF
GO
DROP TABLE dbo.Investment
GO
EXECUTE sp_rename N'dbo.Tmp_Investment', N'Investment', 'OBJECT' 
GO
ALTER TABLE dbo.Investment ADD CONSTRAINT
	PK_Investment PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Investment ADD CONSTRAINT
	FK_Investment_Owner FOREIGN KEY
	(
	OwnerId
	) REFERENCES dbo.Owner
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Investment', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Investment', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Investment', 'Object', 'CONTROL') as Contr_Per 
-------------------------------------------------------------------------------------------------------------------------------------

create the revenue table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Revenue
	(
	Id int NOT NULL IDENTITY (1300, 1),
	OwnerId int NOT NULL,
	Date datetime NOT NULL,
	TotalMoney money NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Revenue ADD CONSTRAINT
	PK_Revenue PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Revenue SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Revenue', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Revenue', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Revenue', 'Object', 'CONTROL') as Contr_Per 


-------------------------------------------------------------------------------------------------------------------------------------

adjust the revenue table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Owner SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Owner', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Revenue ADD CONSTRAINT
	FK_Revenue_Owner FOREIGN KEY
	(
	OwnerId
	) REFERENCES dbo.Owner
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Revenue SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Revenue', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Revenue', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Revenue', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------
Delet the Operation table

USE [SmartShopDatabase]
GO
/****** Object:  Table [dbo].[Operation]    Script Date: 11/12/2019 5:22:12 PM ******/
DROP TABLE [dbo].[Operation]
GO




-------------------------------------------------------------------------------------------------------------------------------------

add the storeId and the StaffId to the revenue tabel

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Staff SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Staff', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Revenue
	DROP CONSTRAINT FK_Revenue_Owner
GO
ALTER TABLE dbo.Owner SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Owner', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Revenue
	(
	Id int NOT NULL IDENTITY (1300, 1),
	OwnerId int NOT NULL,
	Date datetime NOT NULL,
	TotalMoney money NOT NULL,
	StaffId int NOT NULL,
	StoreId int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Revenue SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Revenue ON
GO
IF EXISTS(SELECT * FROM dbo.Revenue)
	 EXEC('INSERT INTO dbo.Tmp_Revenue (Id, OwnerId, Date, TotalMoney)
		SELECT Id, OwnerId, Date, TotalMoney FROM dbo.Revenue WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Revenue OFF
GO
DROP TABLE dbo.Revenue
GO
EXECUTE sp_rename N'dbo.Tmp_Revenue', N'Revenue', 'OBJECT' 
GO
ALTER TABLE dbo.Revenue ADD CONSTRAINT
	PK_Revenue PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Revenue ADD CONSTRAINT
	FK_Revenue_Owner FOREIGN KEY
	(
	OwnerId
	) REFERENCES dbo.Owner
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Revenue ADD CONSTRAINT
	FK_Revenue_Staff FOREIGN KEY
	(
	StaffId
	) REFERENCES dbo.Staff
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Revenue ADD CONSTRAINT
	FK_Revenue_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Revenue', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Revenue', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Revenue', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------
add the storeId and the staffId to the investment tabel 

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Investment
	DROP CONSTRAINT FK_Investment_Owner
GO
ALTER TABLE dbo.Owner SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Owner', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Investment
	(
	Id int NOT NULL IDENTITY (1200, 1),
	OwnerId int NOT NULL,
	Date datetime NOT NULL,
	TotalMoney money NOT NULL,
	StoreId int NOT NULL,
	StaffId int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Investment SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Investment ON
GO
IF EXISTS(SELECT * FROM dbo.Investment)
	 EXEC('INSERT INTO dbo.Tmp_Investment (Id, OwnerId, Date, TotalMoney)
		SELECT Id, OwnerId, Date, TotalMoney FROM dbo.Investment WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Investment OFF
GO
DROP TABLE dbo.Investment
GO
EXECUTE sp_rename N'dbo.Tmp_Investment', N'Investment', 'OBJECT' 
GO
ALTER TABLE dbo.Investment ADD CONSTRAINT
	PK_Investment PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Investment ADD CONSTRAINT
	FK_Investment_Owner FOREIGN KEY
	(
	OwnerId
	) REFERENCES dbo.Owner
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Investment', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Investment', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Investment', 'Object', 'CONTROL') as Contr_Per 


-------------------------------------------------------------------------------------------------------------------------------------

modify the incestment table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Staff SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Staff', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Investment ADD CONSTRAINT
	FK_Investment_Staff FOREIGN KEY
	(
	StaffId
	) REFERENCES dbo.Staff
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Investment ADD CONSTRAINT
	FK_Investment_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Investment SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Investment', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Investment', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Investment', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------

modify the StaffSalary Tabel 


BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Staff SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Staff', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_StaffSalary
	(
	Id int NOT NULL IDENTITY (700000, 1),
	StaffId int NOT NULL,
	StoreId int NOT NULL,
	Date datetime NOT NULL,
	Salary money NOT NULL,
	ToStaffId int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_StaffSalary SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_StaffSalary ON
GO
IF EXISTS(SELECT * FROM dbo.StaffSalary)
	 EXEC('INSERT INTO dbo.Tmp_StaffSalary (Id, StaffId, Date, Salary)
		SELECT Id, StaffId, Date, Salary FROM dbo.StaffSalary WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_StaffSalary OFF
GO
DROP TABLE dbo.StaffSalary
GO
EXECUTE sp_rename N'dbo.Tmp_StaffSalary', N'StaffSalary', 'OBJECT' 
GO
ALTER TABLE dbo.StaffSalary ADD CONSTRAINT
	PK_StaffSalary PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.StaffSalary ADD CONSTRAINT
	FK_StaffSalary_Staff FOREIGN KEY
	(
	StaffId
	) REFERENCES dbo.Staff
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.StaffSalary ADD CONSTRAINT
	FK_StaffSalary_Staff1 FOREIGN KEY
	(
	ToStaffId
	) REFERENCES dbo.Staff
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.StaffSalary ADD CONSTRAINT
	FK_StaffSalary_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.StaffSalary', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.StaffSalary', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.StaffSalary', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------
Create the transform Tabel

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Transform
	(
	Id int NOT NULL IDENTITY (1400, 1),
	StaffId int NOT NULL,
	StoreId int NOT NULL,
	Date datetime NOT NULL,
	TotalMoney money NOT NULL,
	ToStoreId int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Transform ADD CONSTRAINT
	PK_Transform PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Transform SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Transform', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Transform', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Transform', 'Object', 'CONTROL') as Contr_Per 



-------------------------------------------------------------------------------------------------------------------------------------

Modify the Transform Tabel

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Staff SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Staff', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Transform ADD CONSTRAINT
	FK_Transform_Staff FOREIGN KEY
	(
	StaffId
	) REFERENCES dbo.Staff
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Transform ADD CONSTRAINT
	FK_Transform_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Transform ADD CONSTRAINT
	FK_Transform_Store1 FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Transform SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Transform', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Transform', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Transform', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------

Create DeTransform Tabel

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.DeTransform
	(
	Id int NOT NULL IDENTITY (1500, 1),
	StoreId int NOT NULL,
	StaffId int NOT NULL,
	Date datetime NOT NULL,
	TotalMoney money NOT NULL,
	FromStoreId int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.DeTransform ADD CONSTRAINT
	PK_DeTransform PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.DeTransform SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.DeTransform', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.DeTransform', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.DeTransform', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------

modify the DeTransform tabel

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Staff SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Staff', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.DeTransform ADD CONSTRAINT
	FK_DeTransform_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.DeTransform ADD CONSTRAINT
	FK_DeTransform_Staff FOREIGN KEY
	(
	StaffId
	) REFERENCES dbo.Staff
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.DeTransform ADD CONSTRAINT
	FK_DeTransform_Store1 FOREIGN KEY
	(
	FromStoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.DeTransform SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.DeTransform', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.DeTransform', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.DeTransform', 'Object', 'CONTROL') as Contr_Per 


-------------------------------------------------------------------------------------------------------------------------------------

Adding the OrderPayment Tabel

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.OrderPayment
	(
	Id int NOT NULL,
	OrderId int NOT NULL,
	Paid money NOT NULL,
	Date datetime NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.OrderPayment SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.OrderPayment', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.OrderPayment', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.OrderPayment', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------

modify the OrderPayment Tabel

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Orders SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Orders', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Orders', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Orders', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_OrderPayment
	(
	Id int NOT NULL IDENTITY (1600, 1),
	OrderId int NOT NULL,
	Paid money NOT NULL,
	Date datetime NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_OrderPayment SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_OrderPayment ON
GO
IF EXISTS(SELECT * FROM dbo.OrderPayment)
	 EXEC('INSERT INTO dbo.Tmp_OrderPayment (Id, OrderId, Paid, Date)
		SELECT Id, OrderId, Paid, Date FROM dbo.OrderPayment WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_OrderPayment OFF
GO
DROP TABLE dbo.OrderPayment
GO
EXECUTE sp_rename N'dbo.Tmp_OrderPayment', N'OrderPayment', 'OBJECT' 
GO
ALTER TABLE dbo.OrderPayment ADD CONSTRAINT
	PK_OrderPayment PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.OrderPayment ADD CONSTRAINT
	FK_OrderPayment_Orders FOREIGN KEY
	(
	OrderId
	) REFERENCES dbo.Orders
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.OrderPayment', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.OrderPayment', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.OrderPayment', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------

Create IncomeOrderPayment Tabel

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.IncomeOrderPayment
	(
	Id int NOT NULL IDENTITY (1700, 1),
	IncomeOrderId int NOT NULL,
	Paid money NOT NULL,
	Date datetime NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.IncomeOrderPayment ADD CONSTRAINT
	PK_IncomeOrderPayment PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.IncomeOrderPayment SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.IncomeOrderPayment', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.IncomeOrderPayment', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.IncomeOrderPayment', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------

modify IncomeOrderPayment Tabel

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.IncomeOrder SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.IncomeOrder', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.IncomeOrder', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.IncomeOrder', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.IncomeOrderPayment ADD CONSTRAINT
	FK_IncomeOrderPayment_IncomeOrder FOREIGN KEY
	(
	IncomeOrderId
	) REFERENCES dbo.IncomeOrder
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.IncomeOrderPayment SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.IncomeOrderPayment', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.IncomeOrderPayment', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.IncomeOrderPayment', 'Object', 'CONTROL') as Contr_Per 



-------------------------------------------------------------------------------------------------------------------------------------

Edit Product tabel

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Product
	DROP CONSTRAINT FK_Product_Category
GO
ALTER TABLE dbo.Category SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Category', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Category', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Category', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Product
	DROP CONSTRAINT FK_Product_Brand
GO
ALTER TABLE dbo.Brand SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Brand', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Brand', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Brand', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Product
	DROP CONSTRAINT DF_Product_CategoryId
GO
ALTER TABLE dbo.Product
	DROP CONSTRAINT DF_Product_BrandId
GO
CREATE TABLE dbo.Tmp_Product
	(
	Id int NOT NULL IDENTITY (100000, 1),
	Name nvarchar(200) NOT NULL,
	QuantityType nvarchar(200) NULL,
	Size nvarchar(200) NULL,
	BarCode nvarchar(200) NOT NULL,
	SerialNumber nvarchar(200) NULL,
	SerialNumber2 nvarchar(200) NULL,
	Details nvarchar(500) NULL,
	CategoryId int NOT NULL,
	BrandId int NOT NULL,
	SalePrice money NOT NULL,
	IncomePrice money NOT NULL,
	ExpirationPeriod int NULL,
	AlarmQuantity int NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Product SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Product ADD CONSTRAINT
	DF_Product_CategoryId DEFAULT ((11000)) FOR CategoryId
GO
ALTER TABLE dbo.Tmp_Product ADD CONSTRAINT
	DF_Product_BrandId DEFAULT ((10000)) FOR BrandId
GO
SET IDENTITY_INSERT dbo.Tmp_Product ON
GO
IF EXISTS(SELECT * FROM dbo.Product)
	 EXEC('INSERT INTO dbo.Tmp_Product (Id, Name, Size, BarCode, SerialNumber, SerialNumber2, Details, CategoryId, BrandId, SalePrice, IncomePrice, ExpirationPeriod, AlarmQuantity)
		SELECT Id, Name, Size, BarCode, SerialNumber, SerialNumber2, Details, CategoryId, BrandId, SalePrice, IncomePrice, ExpirationPeriod, AlarmQuantity FROM dbo.Product WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Product OFF
GO
ALTER TABLE dbo.OrderProduct
	DROP CONSTRAINT FK_OrderProduct_Product
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Product
GO
ALTER TABLE dbo.IncomeOrderProduct
	DROP CONSTRAINT FK_IncomeOrderProduct_Product
GO
DROP TABLE dbo.Product
GO
EXECUTE sp_rename N'dbo.Tmp_Product', N'Product', 'OBJECT' 
GO
ALTER TABLE dbo.Product ADD CONSTRAINT
	PK_Products PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Product ADD CONSTRAINT
	FK_Product_Brand FOREIGN KEY
	(
	BrandId
	) REFERENCES dbo.Brand
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Product ADD CONSTRAINT
	FK_Product_Category FOREIGN KEY
	(
	CategoryId
	) REFERENCES dbo.Category
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.IncomeOrderProduct ADD CONSTRAINT
	FK_IncomeOrderProduct_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.IncomeOrderProduct SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.IncomeOrderProduct', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.IncomeOrderProduct', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.IncomeOrderProduct', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Stock SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Stock', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.OrderProduct ADD CONSTRAINT
	FK_OrderProduct_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.OrderProduct SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.OrderProduct', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.OrderProduct', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.OrderProduct', 'Object', 'CONTROL') as Contr_Per 


-------------------------------------------------------------------------------------------------------------------------------------

USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spProduct_GetAll]    Script Date: 11/13/2019 2:35:19 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spProduct_GetAll]

AS
BEGIN

	SET NOCOUNT ON;
	
	SELECT Id,Name,QuantityType,Size,BarCode,SerialNumber,SerialNumber2,Details,SalePrice,IncomePrice,ExpirationPeriod,AlarmQuantity
	FROM Product;
END



-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spRevenue_GetAll



AS
BEGIN



	SET NOCOUNT ON;

	SELECT Id , Date , TotalMoney
	FROM Revenue;


END
GO


-------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spRevenue_GetStaffIdByRevenueId 
	@RevenueId int
AS
BEGIN


	SET NOCOUNT ON;

	SELECT StaffId
	FROM Revenue
	WHERE Id = @RevenueId;

END
GO


-------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spRevenue_GetStoreIdByRevenueId
	
	@RevenueId int

AS
BEGIN



	SET NOCOUNT ON;

	SELECT StoreId
	FROM Revenue
	WHERE Id = @RevenueId;

END
GO


-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spInvestments_GetAll
	


AS
BEGIN
	

	SET NOCOUNT ON;

	SELECT Id , Date , TotalMoney
	FROM Investment;
    
END
GO


------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spInvestment_GetStaffIdByInvestmentId
	
	@InvestmentId int

AS
BEGIN
	

	SET NOCOUNT ON;

	SELECT StaffId
	FROM Investment
	WHERE  Id = @InvestmentId ;

    
END
GO


-------------------------------------------------------------------------------------------------------------------------------------

USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spInvestment_GetStoreIdByInvestmentId]    Script Date: 11/16/2019 10:09:49 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spInvestment_GetStoreIdByInvestmentId]
	
	@InvestmentId int

AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT StoreId
	FROM Investment
	WHERE Id = @InvestmentId ; 


END


-------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spOwner_GetAll
	


AS
BEGIN
	

	SET NOCOUNT ON;

	SELECT Id
	FROM Owner;
    
END
GO


-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spOwner_GetPersonIdByOwnerId 

	@OwnerId int

AS
BEGIN


	SET NOCOUNT ON;

	SELECT PersonId
	FROM Owner
	WHERE Id = @OwnerId ;

END
GO


-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spOwner_GetInstallmentIdByOwnerId
	@OwnerId int
AS
BEGIN

	SET NOCOUNT ON;

    SELECT Id
	FROM Investment
	WHERE  Investment.OwnerId = @OwnerId ; 
END
GO


-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spOwner_GetRevenueIdByOwner
	
	@OwnerId int

AS
BEGIN


	SET NOCOUNT ON;

   SELECT Id
   FROM Revenue
   WHERE Revenue.OwnerId = @OwnerId;

END
GO



-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spDeTransform_GetAll
	


AS
BEGIN


	SET NOCOUNT ON;

	SELECT Id,Date,TotalMoney
	FROM DeTransform;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------
ALTER PROCEDURE [dbo].[spDeTransform_GetStaffIdByDeTransformId]
	
	@DeTransformId int

AS
BEGIN


	SET NOCOUNT ON;

	SELECT StaffId
	FROM DeTransform
	WHERE Id = @DeTransformId;

END

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spDeTransform_GetStoreIdByDeTransformId
	
	@DeTransformId int

AS
BEGIN
	


	SET NOCOUNT ON;

	SELECT StoreId
	FROM DeTransform
	WHERE Id = @DeTransformId;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spDeTransform_GetFromStoreIdByDeTransformId 
	
	@DeTransformId int
AS
BEGIN


	SET NOCOUNT ON;

	SELECT FromStoreId
	FROM DeTransform
	WHERE Id = @DeTransformId;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spTransform_GetAll
	

AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT Id ,Date,TotalMoney
	FROM Transform

END
GO

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spTransform_GetStaffIdByTransformId
	
	@TransformId int

AS
BEGIN
	


	SET NOCOUNT ON;

	SELECT StaffId
	FROM Transform
	WHERE Id = @TransformId;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spTransform_GetStoreIdByTransformId
	@TransformId int
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT StoreId
	FROM Transform
	WHERE Id = @TransformId ; 

END
GO

-------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spTransform_GetToStoreIdByTransformId
	

	@TransformId int
AS
BEGIN
	

	SET NOCOUNT ON;

	SELECT ToStoreId
	FROM Transform
	WHERE Id = @TransformId  ; 
    
END
GO

-------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spStaffSalary_GetAll
	
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT Id,Date,Salary
	FROM StaffSalary;
  
END
GO

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spStaffSalary_GetStoreIdByStaffSalaryId
	
	@StaffSalaryId int

AS
BEGIN
	


	SET NOCOUNT ON;

	SELECT StoreId
	FROM StaffSalary
	WHERE  Id = @StaffSalaryId;

END
GO


-------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spStaffSalary_GetStaffIdByStaffSalaryId 
	
	@StaffSalaryId int


AS
BEGIN
	

	SET NOCOUNT ON;

	SELECT StaffId
	FROM StaffSalary
	WHERE Id = @StaffSalaryId; 

END
GO


------------------------------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE spStaffSalary_GetToStaffIdByStaffSalaryId


	@StaffSalaryId int


AS
BEGIN
	

	SET NOCOUNT ON;

	SELECT StaffId
	FROM StaffSalary
	WHERE Id = @StaffSalaryId; 

END
GO

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spStaffSalary_GetToStaffIdByStaffSalaryId]    Script Date: 11/17/2019 1:02:42 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spStaffSalary_GetToStaffIdByStaffSalaryId]


	@StaffSalaryId int


AS
BEGIN
	

	SET NOCOUNT ON;

	SELECT ToStaffId
	FROM StaffSalary
	WHERE Id = @StaffSalaryId; 

END

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spOrderPayment_GetAll 
	

AS
BEGIN
	

	SET NOCOUNT ON;
	
	SELECT Id,Paid,Date
	FROM OrderPayment;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spOrder_GetOrderPaymentIdByOrderId
	@OrderId int
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT Id
	FROM OrderPayment
	WHERE OrderId = @OrderId;
  
END
GO


-------------------------------------------------------------------------------------------------------------------------------------

Remove Paid , lastPayment date From Orders

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Orders
	DROP COLUMN Paid, LastPaymentDate
GO
ALTER TABLE dbo.Orders SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Orders', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Orders', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Orders', 'Object', 'CONTROL') as Contr_Per 


-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spOrders_GetAll]    Script Date: 11/17/2019 6:13:45 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spOrders_GetAll]

	
	
AS
BEGIN

	SET NOCOUNT ON;
	
	SELECT Id,DateTimeOfTheOrder,Details
	FROM Orders;

END

-------------------------------------------------------------------------------------------------------------------------------------

Add StaffId and StoreId To OrderPayment Table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Staff SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Staff', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.OrderPayment
	DROP CONSTRAINT FK_OrderPayment_Orders
GO
ALTER TABLE dbo.Orders SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Orders', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Orders', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Orders', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_OrderPayment
	(
	Id int NOT NULL IDENTITY (1600, 1),
	OrderId int NOT NULL,
	StaffId int NOT NULL,
	StoreId int NOT NULL,
	Paid money NOT NULL,
	Date datetime NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_OrderPayment SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_OrderPayment ON
GO
IF EXISTS(SELECT * FROM dbo.OrderPayment)
	 EXEC('INSERT INTO dbo.Tmp_OrderPayment (Id, OrderId, Paid, Date)
		SELECT Id, OrderId, Paid, Date FROM dbo.OrderPayment WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_OrderPayment OFF
GO
DROP TABLE dbo.OrderPayment
GO
EXECUTE sp_rename N'dbo.Tmp_OrderPayment', N'OrderPayment', 'OBJECT' 
GO
ALTER TABLE dbo.OrderPayment ADD CONSTRAINT
	PK_OrderPayment PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.OrderPayment ADD CONSTRAINT
	FK_OrderPayment_Orders FOREIGN KEY
	(
	OrderId
	) REFERENCES dbo.Orders
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.OrderPayment ADD CONSTRAINT
	FK_OrderPayment_Staff FOREIGN KEY
	(
	StaffId
	) REFERENCES dbo.Staff
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.OrderPayment ADD CONSTRAINT
	FK_OrderPayment_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.OrderPayment', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.OrderPayment', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.OrderPayment', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE spOrderPayment_GetStaffIdByOrderPaymentId
	
	@OrderPaymentId int

AS
BEGIN
	

	SET NOCOUNT ON;

	SELECT StaffId
	FROM OrderPayment
	WHERE Id = @OrderPaymentId ;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE spOrderPayment_GetStoreIdByOrderPaymentId
	@OrderPaymentId int
AS
BEGIN
	

	SET NOCOUNT ON;

	SELECT StoreId
	FROM OrderPayment
	WHERE Id = @OrderPaymentId;
    
END
GO


------------------------------------------------------------------------------------------------------------------------------------

Add the StaffId and StoreId to the IncomeOrderPayment table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.IncomeOrderPayment
	DROP CONSTRAINT FK_IncomeOrderPayment_IncomeOrder
GO
ALTER TABLE dbo.IncomeOrder SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.IncomeOrder', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.IncomeOrder', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.IncomeOrder', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_IncomeOrderPayment
	(
	Id int NOT NULL IDENTITY (1700, 1),
	IncomeOrderId int NOT NULL,
	StaffId int NOT NULL,
	StoreId int NOT NULL,
	Paid money NOT NULL,
	Date datetime NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_IncomeOrderPayment SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_IncomeOrderPayment ON
GO
IF EXISTS(SELECT * FROM dbo.IncomeOrderPayment)
	 EXEC('INSERT INTO dbo.Tmp_IncomeOrderPayment (Id, IncomeOrderId, Paid, Date)
		SELECT Id, IncomeOrderId, Paid, Date FROM dbo.IncomeOrderPayment WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_IncomeOrderPayment OFF
GO
DROP TABLE dbo.IncomeOrderPayment
GO
EXECUTE sp_rename N'dbo.Tmp_IncomeOrderPayment', N'IncomeOrderPayment', 'OBJECT' 
GO
ALTER TABLE dbo.IncomeOrderPayment ADD CONSTRAINT
	PK_IncomeOrderPayment PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.IncomeOrderPayment ADD CONSTRAINT
	FK_IncomeOrderPayment_IncomeOrder FOREIGN KEY
	(
	IncomeOrderId
	) REFERENCES dbo.IncomeOrder
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.IncomeOrderPayment', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.IncomeOrderPayment', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.IncomeOrderPayment', 'Object', 'CONTROL') as Contr_Per 

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spIncomeOrderPayment_GetAll

AS
BEGIN

	SET NOCOUNT ON;

    SELECT Id,Date,Paid
	FROM IncomeOrderPayment
END
GO
-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spIncomeOrderPayment_GetStaffIdByIncomeOrderPayment
	@IncomeOrderPaymentId int
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT StaffId
	FROM IncomeOrderPayment
	WHERE  Id = @IncomeOrderPaymentId ;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spIncomeOrderPayment_GetStoreIdByIncomeOrderPaymentId
	@IncomeOrderPayment int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT StoreId
	FROM IncomeOrderPayment
	WHERE Id = @IncomeOrderPayment;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spIncomeOrder_GetAll]    Script Date: 11/18/2019 11:45:29 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spIncomeOrder_GetAll]
	

AS
BEGIN
	


	SET NOCOUNT ON;

	SELECT Id,BillNumber,Date,Details
	FROM IncomeOrder;
    
END

-------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.IncomeOrder
	DROP COLUMN TotalPrice
GO
ALTER TABLE dbo.IncomeOrder SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.IncomeOrder', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.IncomeOrder', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.IncomeOrder', 'Object', 'CONTROL') as Contr_Per 
-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spIncomeOrder_GetSupplierIdByIncomeOrderId 
	
	@IncomeOrderId int

AS
BEGIN
	

	SET NOCOUNT ON;

	SELECT SupplierId
	FROM IncomeOrder
	WHERE Id = @IncomeOrderId;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spIncomeOrder_GetStoreIdByIncomeOrderId]    Script Date: 11/18/2019 12:24:39 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spIncomeOrder_GetStoreIdByIncomeOrderId]
	
	@IncomeOrderId int

AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT StoreId
	FROM IncomeOrder
	WHERE Id = @IncomeOrderId;


END

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spIncomeOrder_GetStaffIdByIncomeOrderId
	@IncomeOrderId int
AS
BEGIN


	SET NOCOUNT ON;

	SELECT StaffId
	FROM IncomeOrder
	WHERE Id = @IncomeOrderId;
    
END
GO

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spIncomeOrder_GetIncomeOrderPaymentIdByIncomeOrderId
	
	@IncomeOrderId int

AS
BEGIN


	SET NOCOUNT ON;

   SELECT Id
   FROM IncomeOrderPayment
   WHERE IncomeOrderId = @IncomeOrderId;
END
GO

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spIncomeOrder_GetIncomeOrderProductIdByIncomeOrderId 
	
	@IncomeOrderId int

AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT Id
	FROM IncomeOrderProduct
	WHERE IncomeOrderId = @IncomeOrderId;

END
GO

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spShopBill_GetStoreIdByShopBillId
	@ShopBillId int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT StoreId
	FROM ShopBill
	WHERE Id = @ShopBillId; 
END
GO

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spShopBill_GetStaffIdByShopBillId
	@ShopBillId int
	
AS
BEGIN

	SET NOCOUNT ON;

	SELECT StaffId
	FROM ShopBill
	WHERE Id = @ShopBillId;
END
GO


-------------------------------------------------------------------------------------------------------------------------------------
Add Colums to person Table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Person
	(
	Id int NOT NULL IDENTITY (1000000, 1),
	FirstName nvarchar(50) NOT NULL,
	LastName nvarchar(50) NULL,
	PhoneNumber nvarchar(200) NULL,
	NationalNumber nvarchar(200) NULL,
	BirthDate datetime NULL,
	JopTitle nvarchar(200) NULL,
	JopAddress nvarchar(200) NULL,
	GraduationDate datetime NULL,
	Qualification nvarchar(200) NULL,
	Email nvarchar(200) NULL,
	Address nvarchar(200) NULL,
	City nvarchar(100) NULL,
	Country nvarchar(100) NULL,
	Details nvarchar(500) NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Person SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Person ON
GO
IF EXISTS(SELECT * FROM dbo.Person)
	 EXEC('INSERT INTO dbo.Tmp_Person (Id, FirstName, LastName, PhoneNumber, NationalNumber, Email, Address, City, Country, Details)
		SELECT Id, FirstName, LastName, PhoneNumber, NationalNumber, Email, Address, City, Country, Details FROM dbo.Person WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Person OFF
GO
ALTER TABLE dbo.Customer
	DROP CONSTRAINT FK_Customers_Person
GO
ALTER TABLE dbo.Supplier
	DROP CONSTRAINT FK_Supplier_Person
GO
ALTER TABLE dbo.Owner
	DROP CONSTRAINT FK_Owner_Person
GO
ALTER TABLE dbo.Staff
	DROP CONSTRAINT FK_Staff_Person
GO
DROP TABLE dbo.Person
GO
EXECUTE sp_rename N'dbo.Tmp_Person', N'Person', 'OBJECT' 
GO
ALTER TABLE dbo.Person ADD CONSTRAINT
	PK_Person PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT
select Has_Perms_By_Name(N'dbo.Person', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Person', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Person', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Staff ADD CONSTRAINT
	FK_Staff_Person FOREIGN KEY
	(
	PersonId
	) REFERENCES dbo.Person
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Staff SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Staff', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Owner ADD CONSTRAINT
	FK_Owner_Person FOREIGN KEY
	(
	PersonId
	) REFERENCES dbo.Person
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Owner SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Owner', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Owner', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Supplier ADD CONSTRAINT
	FK_Supplier_Person FOREIGN KEY
	(
	PersonId
	) REFERENCES dbo.Person
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Supplier SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Supplier', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Supplier', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Supplier', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Customer ADD CONSTRAINT
	FK_Customers_Person FOREIGN KEY
	(
	PersonId
	) REFERENCES dbo.Person
	(
	Id
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.Customer SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Customer', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Customer', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Customer', 'Object', 'CONTROL') as Contr_Per 
-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spPerson_GetAll]    Script Date: 11/20/2019 9:42:43 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spPerson_GetAll]

AS
BEGIN

	SET NOCOUNT ON;
	
	SELECT Id,FirstName,LastName,PhoneNumber,NationalNumber,BirthDate,JopTitle,JopAddress,GraduationDate,Qualification,Email,Address,City,Country FROM Person;
END

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spPerson_CreatePerson]    Script Date: 11/21/2019 11:30:00 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[spPerson_CreatePerson]
				@FirstName nvarchar(50),
                @LastName nvarchar(50),
                @PhoneNumber nvarchar(200),
                @NationalNumber nvarchar(200),
				@BirthDate datetime,
				@JopTitle nvarchar(200),
				@JopAddress nvarchar(200),
				@GradutionDate datetime,
				@Qualification nvarchar(200),
                @Email nvarchar(200),
                @Address nvarchar(200),
                @City nvarchar(100),
                @Country nvarchar(100),
				@Details nvarchar(500),

                @Id int = 0 output
AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO Person(FirstName,LastName,PhoneNumber,NationalNumber,BirthDate,JopTitle,JopAddress,GraduationDate,Qualification,Email,Address,City,Country,Details)
	VALUES (@FirstName,@LastName ,@PhoneNumber , @NationalNumber,@BirthDate,@JopTitle,@JopAddress,@GradutionDate,@Qualification , @Email , @Address , @City , @Country,@Details);

	SELECT @Id = SCOPE_IDENTITY();
END
-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spIncomeOrderPayment_GetStoreIdByIncomeOrderPaymentId]    Script Date: 11/23/2019 8:15:23 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spIncomeOrderPayment_GetStoreIdByIncomeOrderPaymentId]
	@IncomeOrderPaymentId int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT StoreId
	FROM IncomeOrderPayment
	WHERE Id = @IncomeOrderPaymentId;

END

-------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE spInvestment_Create
	
	@OwnerId int,
	@Date datetime,
	@TotalMoney money,
	@StoreId int,
	@StaffId int
AS
BEGIN

	SET NOCOUNT ON;

	INSERT 	INTO Investment(OwnerId,Date,TotalMoney,StoreId,StaffId)
	VALUES (@OwnerId,@Date,@TotalMoney,@StoreId,@StaffId) ;
	
END
GO

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spInvestment_Create]    Script Date: 11/24/2019 7:04:39 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[spInvestment_Create]
	
	@OwnerId int,
	@Date datetime,
	@TotalMoney money,
	@StoreId int,
	@StaffId int,
	 @Id int = 0 output
AS
BEGIN

	SET NOCOUNT ON;

	INSERT 	INTO Investment(OwnerId,Date,TotalMoney,StoreId,StaffId)
	VALUES (@OwnerId,@Date,@TotalMoney,@StoreId,@StaffId) ;
	
END

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spInvestment_Create]    Script Date: 11/24/2019 7:08:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[spInvestment_Create]
	
	@OwnerId int,
	@Date datetime,
	@TotalMoney money,
	@StoreId int,
	@StaffId int,
	 @Id int = 0 output
AS
BEGIN

	SET NOCOUNT ON;

	INSERT 	INTO Investment(OwnerId,Date,TotalMoney,StoreId,StaffId)
	VALUES (@OwnerId,@Date,@TotalMoney,@StoreId,@StaffId) ;
			SELECT @Id = SCOPE_IDENTITY();

END

-------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE spRevenue_Create
	@OwnerId int,
	@Date datetime,
	@TotalMoney money,
	@StoreId int,
	@StaffId int,
	 @Id int = 0 output
AS
BEGIN

	SET NOCOUNT ON;

	INSERT 	INTO Revenue(OwnerId,Date,TotalMoney,StoreId,StaffId)
	VALUES (@OwnerId,@Date,@TotalMoney,@StoreId,@StaffId) ;
			SELECT @Id = SCOPE_IDENTITY();

END
GO

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spTransform_Create 
	
	@StaffId int,
	@StoreId int,
	@Date DateTime,
	@TotalMoney money,
	@ToStoreId int,
		 @Id int = 0 output


AS
BEGIN
	
	SET NOCOUNT ON;
	
	INSERT INTO Transform(StaffId,StoreId,Date,TotalMoney,ToStoreId)
	VALUES(@StaffId,@StoreId,@Date,@TotalMoney,@ToStoreId);

				SELECT @Id = SCOPE_IDENTITY();
END
GO

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spDeTransform_Create
	
	@StaffId int,
	@StoreId int,
	@Date DateTime,
	@TotalMoney money,
	@FromStoreId int,
		 @Id int = 0 output
AS
BEGIN
	
	SET NOCOUNT ON;

	INSERT INTO DeTransform(StaffId,StoreId,Date,TotalMoney,FromStoreId)
	VALUES(@StaffId,@StoreId,@Date,@TotalMoney,@FromStoreId);

				SELECT @Id = SCOPE_IDENTITY();
END
GO

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spProduct_Create]    Script Date: 11/25/2019 12:35:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spProduct_Create]
	
	@ProductName nvarchar(200),
	@QuantityType nvarchar(200),
	@Size nvarchar(200),
	@BarCode nvarchar(200),
	@SerialNumber nvarchar(200),
	@SerialNumber2 nvarchar(200),
	@Details nvarchar(500),
	@SalePrice money,
	@IncomePrice money,
	@ExpirationPerid int,
	@AlarmQuantity int,
	@BrandId int,
	@CategoryId int,

	@Id int = 0 out 
AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO Product
	(Name,QuantityType,Size,BarCode,SerialNumber,SerialNumber2,Details,SalePrice,IncomePrice,ExpirationPeriod,AlarmQuantity,BrandId,CategoryId)
	VALUES (@ProductName,@QuantityType,@Size,@BarCode,@SerialNumber,@SerialNumber2,@Details,@SalePrice,@IncomePrice,@ExpirationPerid,@AlarmQuantity,@BrandId,@CategoryId);

	SELECT @Id = SCOPE_IDENTITY();
END

-------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Product
	DROP CONSTRAINT DF_Product_CategoryId
GO
ALTER TABLE dbo.Product
	DROP CONSTRAINT DF_Product_BrandId
GO
CREATE TABLE dbo.Tmp_Product
	(
	Id int NOT NULL IDENTITY (100000, 1),
	Name nvarchar(200) NOT NULL,
	QuantityType nvarchar(200) NULL,
	Size nvarchar(200) NULL,
	BarCode nvarchar(200) NOT NULL,
	SerialNumber nvarchar(200) NULL,
	SerialNumber2 nvarchar(200) NULL,
	Details nvarchar(500) NULL,
	CategoryId int NOT NULL,
	BrandId int NOT NULL,
	SalePrice money NOT NULL,
	IncomePrice money NOT NULL,
	ExpirationPeriod time(7) NULL,
	AlarmQuantity int NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Product SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Product ADD CONSTRAINT
	DF_Product_CategoryId DEFAULT ((11000)) FOR CategoryId
GO
ALTER TABLE dbo.Tmp_Product ADD CONSTRAINT
	DF_Product_BrandId DEFAULT ((10000)) FOR BrandId
GO
SET IDENTITY_INSERT dbo.Tmp_Product ON
GO
IF EXISTS(SELECT * FROM dbo.Product)
	 EXEC('INSERT INTO dbo.Tmp_Product (Id, Name, QuantityType, Size, BarCode, SerialNumber, SerialNumber2, Details, CategoryId, BrandId, SalePrice, IncomePrice, AlarmQuantity)
		SELECT Id, Name, QuantityType, Size, BarCode, SerialNumber, SerialNumber2, Details, CategoryId, BrandId, SalePrice, IncomePrice, AlarmQuantity FROM dbo.Product WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Product OFF
GO
ALTER TABLE dbo.IncomeOrderProduct
	DROP CONSTRAINT FK_IncomeOrderProduct_Product
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Product
GO
ALTER TABLE dbo.OrderProduct
	DROP CONSTRAINT FK_OrderProduct_Product
GO
DROP TABLE dbo.Product
GO
EXECUTE sp_rename N'dbo.Tmp_Product', N'Product', 'OBJECT' 
GO
ALTER TABLE dbo.Product ADD CONSTRAINT
	PK_Products PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.OrderProduct ADD CONSTRAINT
	FK_OrderProduct_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.OrderProduct SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.OrderProduct', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.OrderProduct', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.OrderProduct', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Stock SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Stock', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.IncomeOrderProduct ADD CONSTRAINT
	FK_IncomeOrderProduct_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.IncomeOrderProduct SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.IncomeOrderProduct', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.IncomeOrderProduct', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.IncomeOrderProduct', 'Object', 'CONTROL') as Contr_Per 
-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spProduct_Create]    Script Date: 11/26/2019 6:32:40 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spProduct_Create]
	
	@ProductName nvarchar(200),
	@QuantityType nvarchar(200),
	@Size nvarchar(200),
	@BarCode nvarchar(200),
	@SerialNumber nvarchar(200),
	@SerialNumber2 nvarchar(200),
	@Details nvarchar(500),
	@SalePrice money,
	@IncomePrice money,
	@ExpirationPerid time(7),
	@AlarmQuantity int,
	@BrandId int,
	@CategoryId int,

	@Id int = 0 out 
AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO Product
	(Name,QuantityType,Size,BarCode,SerialNumber,SerialNumber2,Details,SalePrice,IncomePrice,ExpirationPeriod,AlarmQuantity,BrandId,CategoryId)
	VALUES (@ProductName,@QuantityType,@Size,@BarCode,@SerialNumber,@SerialNumber2,@Details,@SalePrice,@IncomePrice,@ExpirationPerid,@AlarmQuantity,@BrandId,@CategoryId);

	SELECT @Id = SCOPE_IDENTITY();
END

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spProduct_Create]    Script Date: 11/26/2019 7:54:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spProduct_Create]
	
	@ProductName nvarchar(200),
	@QuantityType nvarchar(200),
	@Size nvarchar(200),
	@BarCode nvarchar(200),
	@SerialNumber nvarchar(200),
	@SerialNumber2 nvarchar(200),
	@Details nvarchar(500),
	@SalePrice money,
	@IncomePrice money,
	@ExpirationPeriodHours float ,
	@AlarmQuantity int,
	@BrandId int,
	@CategoryId int,

	@Id int = 0 out 
AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO Product
	(Name,QuantityType,Size,BarCode,SerialNumber,SerialNumber2,Details,SalePrice,IncomePrice,ExpirationPeriodHours,AlarmQuantity,BrandId,CategoryId)
	VALUES (@ProductName,@QuantityType,@Size,@BarCode,@SerialNumber,@SerialNumber2,@Details,@SalePrice,@IncomePrice,@ExpirationPeriodHours,@AlarmQuantity,@BrandId,@CategoryId);

	SELECT @Id = SCOPE_IDENTITY();
END

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spProduct_GetAll]    Script Date: 11/26/2019 8:04:07 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spProduct_GetAll]

AS
BEGIN

	SET NOCOUNT ON;
	
	SELECT Id,Name,QuantityType,Size,BarCode,SerialNumber,SerialNumber2,Details,SalePrice,IncomePrice,ExpirationPeriodHours,AlarmQuantity
	FROM Product;
END

-------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Product
GO
ALTER TABLE dbo.Product SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Store
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT DF_Stock_Quantity
GO
CREATE TABLE dbo.Tmp_Stock
	(
	Id int NOT NULL IDENTITY (12000, 1),
	StoreId int NOT NULL,
	ProductId int NOT NULL,
	IncomePrice money NULL,
	SalePrice money NULL,
	Date datetime NULL,
	ExpirationPeriodHours float(53) NULL,
	ExpirationAlarmEnabled bit NULL,
	Quantity float(53) NOT NULL,
	AlarmQuantity int NULL,
	QuantityAlarmEnabled bit NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Stock SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Stock ADD CONSTRAINT
	DF_Stock_Quantity DEFAULT ((0)) FOR Quantity
GO
SET IDENTITY_INSERT dbo.Tmp_Stock ON
GO
IF EXISTS(SELECT * FROM dbo.Stock)
	 EXEC('INSERT INTO dbo.Tmp_Stock (Id, StoreId, ProductId, IncomePrice, SalePrice, Date, ExpirationPeriodHours, ExpirationAlarmEnabled, Quantity, AlarmQuantity, QuantityAlarmEnabled)
		SELECT Id, StoreId, ProductId, IncomePrice, SalePrice, Date, CONVERT(float(53), ExpirationPeriod), ExpirationAlarmEnabled, Quantity, AlarmQuantity, QuantityAlarmEnabled FROM dbo.Stock WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Stock OFF
GO
DROP TABLE dbo.Stock
GO
EXECUTE sp_rename N'dbo.Tmp_Stock', N'Stock', 'OBJECT' 
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	PK_Stock PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Stock', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'CONTROL') as Contr_Per 
-------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Product
GO
ALTER TABLE dbo.Product SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Store
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT DF_Stock_Quantity
GO
CREATE TABLE dbo.Tmp_Stock
	(
	Id int NOT NULL IDENTITY (12000, 1),
	SBarCode nvarchar(200) NOT NULL,
	StoreId int NOT NULL,
	ProductId int NOT NULL,
	IncomePrice money NULL,
	SalePrice money NULL,
	Date datetime NULL,
	ExpirationPeriodHours float(53) NULL,
	ExpirationAlarmEnabled bit NULL,
	Quantity float(53) NOT NULL,
	AlarmQuantity int NULL,
	QuantityAlarmEnabled bit NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Stock SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Stock ADD CONSTRAINT
	DF_Stock_Quantity DEFAULT ((0)) FOR Quantity
GO
SET IDENTITY_INSERT dbo.Tmp_Stock ON
GO
IF EXISTS(SELECT * FROM dbo.Stock)
	 EXEC('INSERT INTO dbo.Tmp_Stock (Id, StoreId, ProductId, IncomePrice, SalePrice, Date, ExpirationPeriodHours, ExpirationAlarmEnabled, Quantity, AlarmQuantity, QuantityAlarmEnabled)
		SELECT Id, StoreId, ProductId, IncomePrice, SalePrice, Date, ExpirationPeriodHours, ExpirationAlarmEnabled, Quantity, AlarmQuantity, QuantityAlarmEnabled FROM dbo.Stock WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Stock OFF
GO
DROP TABLE dbo.Stock
GO
EXECUTE sp_rename N'dbo.Tmp_Stock', N'Stock', 'OBJECT' 
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	PK_Stock PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Stock', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'CONTROL') as Contr_Per 
-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spStock_GetAll]    Script Date: 12/1/2019 11:56:46 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spStock_GetAll]

AS
BEGIN

	SET NOCOUNT ON;

	SELECT Id,
	SBarCode,
		   IncomePrice,
		   SalePrice,
		   Date,
		   ExpirationPeriodHours,
		   ExpirationAlarmEnabled,
		   Quantity,
		   AlarmQuantity,
		   QuantityAlarmEnabled 
	FROM Stock;

END

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spStock_Create]    Script Date: 12/2/2019 11:51:09 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spStock_Create] 

	@SBarCode nvarchar(200),
	@StoreId int,
	@ProductId int,
	@IncomePrice money,
	@SalePrice money,
	@Date datetime,
	@ExpirationPeriodHours float,
	@ExpirationAlarmEnabled bit,
	@Quantity int,
	@AlarmQuantity int,
	@QuantityAlarmEnabled bit,
	@Id int = 0 out
AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO 
	Stock
	(SBarCode,
	StoreId,
	ProductId,
	IncomePrice,
	SalePrice,
	Date,
	ExpirationPeriodHours,
	ExpirationAlarmEnabled,
	Quantity,
	AlarmQuantity,
	QuantityAlarmEnabled)
	VALUES 
	(@SBarCode,
	@StoreId,
	@ProductId,
	@IncomePrice,
	@SalePrice,
	@Date,
	@ExpirationPeriodHours,
	@ExpirationAlarmEnabled,
	@Quantity,
	@AlarmQuantity
	,@QuantityAlarmEnabled);

	SELECT @Id = SCOPE_IDENTITY();

END

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spIncomeOrder_CreateIncomeOrder]    Script Date: 12/2/2019 2:30:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spIncomeOrder_CreateIncomeOrder]


	@SupplierId int ,
	@BillNumber nvarchar(200),
	@Date datetime,
	@StoreId int,
	@StaffId int,
	@Details nvarchar(500),
	@Id int = 0 output

AS
BEGIN


	SET NOCOUNT ON;

	INSERT INTO dbo.IncomeOrder(SupplierId,BillNumber,Date,StoreId,StaffId,Details)
	VALUES (@SupplierId,@BillNumber,@Date,@StoreId,@StaffId,@Details);

    SELECT @Id = SCOPE_IDENTITY();

END

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spIncomeOrderProduct_Create]    Script Date: 12/2/2019 2:47:49 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spIncomeOrderProduct_Create]

	@IncomeOrderId int,
	@ProductId int,
	@IncomePrice int,
	@Quantity int,
	@Id int = 0 out 

AS
BEGIN



	SET NOCOUNT ON;

	INSERT INTO dbo.IncomeOrderProduct(IncomeOrderId,ProductId,IncomePrice,Quantity)
	VALUES (@IncomeOrderId,@ProductId,@IncomePrice,@Quantity);

		SELECT @Id = SCOPE_IDENTITY();

END

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spIncomeOrderPayment_Create
		@IncomeOrderId int,
		@StaffId int,
		@StoreId int,
		@Paid money,
		@Date datetime,
		@Id int = 0 out 

AS
BEGIN

	SET NOCOUNT ON;

    INSERT INTO IncomeOrderPayment(IncomeOrderId,StaffId,StoreId,Paid,Date)
	VALUES(@IncomeOrderId,@StaffId,@StoreId,@Paid,@Date);


			SELECT @Id = SCOPE_IDENTITY();

END
GO

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spStock_Update]    Script Date: 12/2/2019 3:47:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spStock_Update]
	@Id int,
	@Date datetime,
	@AlarmQuantity int,
	@QuantityAlarmEnabled bit,
	@Quantity int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	UPDATE Stock 
	SET 
	Date = @Date,
	AlarmQuantity = @AlarmQuantity,
	QuantityAlarmEnabled = @QuantityAlarmEnabled,
	Quantity = @Quantity
	WHERE Stock.Id = @Id;
END

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spOrders_CreateOrder]    Script Date: 12/4/2019 11:40:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spOrders_CreateOrder] 
	
	@CustomerId int,
	@DateTimeOfTheOrder datetime,
	@StoreId int,
	@StaffId int,
	@Details nvarchar(500),
	@Id int = 0 output
AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO dbo.Orders(CustomerId,DateTimeOfTheOrder,StoreId,StaffId,Details)
	VALUES (@CustomerId,@DateTimeOfTheOrder,@StoreId,@StaffId,@Details);

	SELECT @Id = SCOPE_IDENTITY();
	
END

-------------------------------------------------------------------------------------------------------------------------------------
USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spOrderProduct_Create]    Script Date: 12/5/2019 9:30:49 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROCEDURE [dbo].[spOrderProduct_Create]
					@OrderId int,
                    @ProductId int,
					@Quantity int,
                    @SalePrice money,
                    @Discount money,
					@Profit money,
					@Id int = 0 output
AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO OrderProduct(OrderId,ProductId,Quantity,SalePrice,Discount,Profit)
	VALUES (@OrderId,@ProductId,@Quantity,@SalePrice,@Discount,@Profit);
		SELECT @Id = SCOPE_IDENTITY();


END

-------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE spOrderPayment_Create
		@OrderId int,
		@StaffId int,
		@StoreId int,
		@Paid money,
		@Date datetime,
		@Id int = 0 out 
AS
BEGIN

	SET NOCOUNT ON;
  INSERT INTO OrderPayment(OrderId,StaffId,StoreId,Paid,Date)
	VALUES(@OrderId,@StaffId,@StoreId,@Paid,@Date);


			SELECT @Id = SCOPE_IDENTITY();
END
GO

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------



















