
// add the details to the staffSalary Table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.StaffSalary
	DROP CONSTRAINT FK_StaffSalary_Store
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.StaffSalary
	DROP CONSTRAINT FK_StaffSalary_Staff
GO
ALTER TABLE dbo.StaffSalary
	DROP CONSTRAINT FK_StaffSalary_Staff1
GO
ALTER TABLE dbo.Staff SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Staff', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Staff', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_StaffSalary
	(
	Id int NOT NULL IDENTITY (700000, 1),
	StaffId int NOT NULL,
	StoreId int NOT NULL,
	Date datetime NOT NULL,
	Salary money NOT NULL,
	Details nvarchar(500) NULL,
	ToStaffId int NOT NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_StaffSalary SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_StaffSalary ON
GO
IF EXISTS(SELECT * FROM dbo.StaffSalary)
	 EXEC('INSERT INTO dbo.Tmp_StaffSalary (Id, StaffId, StoreId, Date, Salary, ToStaffId)
		SELECT Id, StaffId, StoreId, Date, Salary, ToStaffId FROM dbo.StaffSalary WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_StaffSalary OFF
GO
DROP TABLE dbo.StaffSalary
GO
EXECUTE sp_rename N'dbo.Tmp_StaffSalary', N'StaffSalary', 'OBJECT' 
GO
ALTER TABLE dbo.StaffSalary ADD CONSTRAINT
	PK_StaffSalary PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.StaffSalary ADD CONSTRAINT
	FK_StaffSalary_Staff FOREIGN KEY
	(
	StaffId
	) REFERENCES dbo.Staff
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.StaffSalary ADD CONSTRAINT
	FK_StaffSalary_Staff1 FOREIGN KEY
	(
	ToStaffId
	) REFERENCES dbo.Staff
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.StaffSalary ADD CONSTRAINT
	FK_StaffSalary_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.StaffSalary', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.StaffSalary', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.StaffSalary', 'Object', 'CONTROL') as Contr_Per 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Edit the storeProcedure of getting StaffSalary

USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spStaffSalary_GetAll]    Script Date: 12/19/2019 9:27:11 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spStaffSalary_GetAll]
	
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT Id,Date,Salary,Details
	FROM StaffSalary;
  
END

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// adding NotifyWhenTimeLeftHours to stock table

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Product
GO
ALTER TABLE dbo.Product SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Store
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT DF_Stock_Quantity
GO
CREATE TABLE dbo.Tmp_Stock
	(
	Id int NOT NULL IDENTITY (12000, 1),
	SBarCode nvarchar(200) NOT NULL,
	StoreId int NOT NULL,
	ProductId int NOT NULL,
	IncomePrice money NULL,
	SalePrice money NULL,
	Date datetime NULL,
	ExpirationPeriodHours float(53) NULL,
	NotifyWhenTimeLeftHours float(53) NULL,
	ExpirationAlarmEnabled bit NULL,
	Quantity float(53) NOT NULL,
	AlarmQuantity int NULL,
	QuantityAlarmEnabled bit NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Stock SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Stock ADD CONSTRAINT
	DF_Stock_Quantity DEFAULT ((0)) FOR Quantity
GO
SET IDENTITY_INSERT dbo.Tmp_Stock ON
GO
IF EXISTS(SELECT * FROM dbo.Stock)
	 EXEC('INSERT INTO dbo.Tmp_Stock (Id, SBarCode, StoreId, ProductId, IncomePrice, SalePrice, Date, ExpirationPeriodHours, ExpirationAlarmEnabled, Quantity, AlarmQuantity, QuantityAlarmEnabled)
		SELECT Id, SBarCode, StoreId, ProductId, IncomePrice, SalePrice, Date, ExpirationPeriodHours, ExpirationAlarmEnabled, Quantity, AlarmQuantity, QuantityAlarmEnabled FROM dbo.Stock WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Stock OFF
GO
DROP TABLE dbo.Stock
GO
EXECUTE sp_rename N'dbo.Tmp_Stock', N'Stock', 'OBJECT' 
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	PK_Stock PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Stock', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'CONTROL') as Contr_Per 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// spStock_Create

USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spStock_Create]    Script Date: 12/21/2019 3:39:52 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spStock_Create] 

	@SBarCode nvarchar(200),
	@StoreId int,
	@ProductId int,
	@IncomePrice money,
	@SalePrice money,
	@Date datetime,
	@ExpirationPeriodHours float,
	@NotifyWhenTimeLeftHours float,
	@ExpirationAlarmEnabled bit,
	@Quantity int,
	@AlarmQuantity int,
	@QuantityAlarmEnabled bit,
	@Id int = 0 out
AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO 
	Stock
	(SBarCode,
	StoreId,
	ProductId,
	IncomePrice,
	SalePrice,
	Date,
	ExpirationPeriodHours,
	NotifyWhenTimeLeftHours,
	ExpirationAlarmEnabled,
	Quantity,
	AlarmQuantity,
	QuantityAlarmEnabled)
	VALUES 
	(@SBarCode,
	@StoreId,
	@ProductId,
	@IncomePrice,
	@SalePrice,
	@Date,
	@ExpirationPeriodHours,
	@NotifyWhenTimeLeftHours,
	@ExpirationAlarmEnabled,
	@Quantity,
	@AlarmQuantity
	,@QuantityAlarmEnabled);

	SELECT @Id = SCOPE_IDENTITY();

END


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Change the notification way to be stored by date

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Product
GO
ALTER TABLE dbo.Product SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Product', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Product', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT FK_Stock_Store
GO
ALTER TABLE dbo.Store SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Store', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Store', 'Object', 'CONTROL') as Contr_Per BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stock
	DROP CONSTRAINT DF_Stock_Quantity
GO
CREATE TABLE dbo.Tmp_Stock
	(
	Id int NOT NULL IDENTITY (12000, 1),
	SBarCode nvarchar(200) NOT NULL,
	StoreId int NOT NULL,
	ProductId int NOT NULL,
	IncomePrice money NULL,
	SalePrice money NULL,
	Date datetime NULL,
	ExpirationDate datetime NULL,
	NotificationDate datetime NULL,
	ExpirationAlarmEnabled bit NULL,
	Quantity float(53) NOT NULL,
	AlarmQuantity int NULL,
	QuantityAlarmEnabled bit NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Stock SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Stock ADD CONSTRAINT
	DF_Stock_Quantity DEFAULT ((0)) FOR Quantity
GO
SET IDENTITY_INSERT dbo.Tmp_Stock ON
GO
IF EXISTS(SELECT * FROM dbo.Stock)
	 EXEC('INSERT INTO dbo.Tmp_Stock (Id, SBarCode, StoreId, ProductId, IncomePrice, SalePrice, Date, ExpirationDate, NotificationDate, ExpirationAlarmEnabled, Quantity, AlarmQuantity, QuantityAlarmEnabled)
		SELECT Id, SBarCode, StoreId, ProductId, IncomePrice, SalePrice, Date, CONVERT(datetime, ExpirationPeriodHours), CONVERT(datetime, NotifyWhenTimeLeftHours), ExpirationAlarmEnabled, Quantity, AlarmQuantity, QuantityAlarmEnabled FROM dbo.Stock WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Stock OFF
GO
DROP TABLE dbo.Stock
GO
EXECUTE sp_rename N'dbo.Tmp_Stock', N'Stock', 'OBJECT' 
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	PK_Stock PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Store FOREIGN KEY
	(
	StoreId
	) REFERENCES dbo.Store
	(
	Id
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.Stock ADD CONSTRAINT
	FK_Stock_Product FOREIGN KEY
	(
	ProductId
	) REFERENCES dbo.Product
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
select Has_Perms_By_Name(N'dbo.Stock', 'Object', 'ALTER') as ALT_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'VIEW DEFINITION') as View_def_Per, Has_Perms_By_Name(N'dbo.Stock', 'Object', 'CONTROL') as Contr_Per 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spStock_GetAll]    Script Date: 12/23/2019 9:35:09 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spStock_GetAll]

AS
BEGIN

	SET NOCOUNT ON;

	SELECT Id,
	SBarCode,
		   IncomePrice,
		   SalePrice,
		   Date,
		   ExpirationDate,
		   NotificationDate,
		   ExpirationAlarmEnabled,
		   Quantity,
		   AlarmQuantity,
		   QuantityAlarmEnabled 
	FROM Stock;

END


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// spCreatestock

USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spStock_Create]    Script Date: 12/24/2019 3:12:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spStock_Create] 

	@SBarCode nvarchar(200),
	@StoreId int,
	@ProductId int,
	@IncomePrice money,
	@SalePrice money,
	@Date datetime,
	@ExpirationDate float,
	@NotificationDate float,
	@ExpirationAlarmEnabled bit,
	@Quantity int,
	@AlarmQuantity int,
	@QuantityAlarmEnabled bit,
	@Id int = 0 out
AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO 
	Stock
	(SBarCode,
	StoreId,
	ProductId,
	IncomePrice,
	SalePrice,
	Date,
	ExpirationDate,
	NotificationDate,
	ExpirationAlarmEnabled,
	Quantity,
	AlarmQuantity,
	QuantityAlarmEnabled)
	VALUES 
	(@SBarCode,
	@StoreId,
	@ProductId,
	@IncomePrice,
	@SalePrice,
	@Date,
	@ExpirationDate,
	@NotificationDate,
	@ExpirationAlarmEnabled,
	@Quantity,
	@AlarmQuantity
	,@QuantityAlarmEnabled);

	SELECT @Id = SCOPE_IDENTITY();

END

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// spCreatestock

USE [SmartShopDatabase]
GO
/****** Object:  StoredProcedure [dbo].[spStock_Create]    Script Date: 12/24/2019 4:46:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[spStock_Create] 

	@SBarCode nvarchar(200),
	@StoreId int,
	@ProductId int,
	@IncomePrice money,
	@SalePrice money,
	@Date datetime,
	@ExpirationDate datetime,
	@NotificationDate datetime,
	@ExpirationAlarmEnabled bit,
	@Quantity int,
	@AlarmQuantity int,
	@QuantityAlarmEnabled bit,
	@Id int = 0 out
AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO 
	Stock
	(SBarCode,
	StoreId,
	ProductId,
	IncomePrice,
	SalePrice,
	Date,
	ExpirationDate,
	NotificationDate,
	ExpirationAlarmEnabled,
	Quantity,
	AlarmQuantity,
	QuantityAlarmEnabled)
	VALUES 
	(@SBarCode,
	@StoreId,
	@ProductId,
	@IncomePrice,
	@SalePrice,
	@Date,
	@ExpirationDate,
	@NotificationDate,
	@ExpirationAlarmEnabled,
	@Quantity,
	@AlarmQuantity
	,@QuantityAlarmEnabled);

	SELECT @Id = SCOPE_IDENTITY();

END

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
